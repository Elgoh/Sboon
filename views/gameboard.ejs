<h1 class="text-center mt-4">LIE || DIE</h1>
<p class="lead text-center mb-3">Say hi to your friends <%= user.name %>!</p>
<canvas tabindex='1' id="ctx" width="750" height="500" style="border:1px solid #000000; float:left;"></canvas>
<div id="chatbox" style="float:right; width:25%;">
        <div class="chat-sidebar">
            <h3><i class="fas fa-users"></i> Player's Chat</h3>
        </div>
            <div id = "chat-text" style="float:top; height:200px; overflow-y:auto; overflow-x:auto; "></div>
        <div class="chat-form-container">
        <form id="chat-form">
            <input
            id="chat-input"
            type="text"
            placeholder="Enter Message"
            required
            autocomplete="off"
            />
            <button type="submit" id="chat-form"><i class="fas fa-paper-plane"></i> Send</button>
        </form>
        </div>
        <a href="/dashboard" class="btn btn-secondary" style="margin-top: 10px;">Dashboard</a>
  </div>
  

 
<script src="/socket.io/socket.io.js"></script>
<script>
    const ctx = document.getElementById("ctx").getContext("2d");
    const ctxx = document.getElementById("ctx");
    ctx.font = '20px lucida';
    const socket = io();
    const WIDTH = 750;
    const HEIGHT = 500;
    //chatbox code
    var chatText = document.getElementById("chat-text");
    var chatForm = document.getElementById("chat-form");
    var chatInput = document.getElementById("chat-input");
    // var chatMessages = document.querySelector('.chat-messages');
    var playerName = "<%= user.name %>";

    // socket.on('addToChat', function(data) {
    //     chatText.innerHTML += '<div>' + data + '</div>';
        
    //     // auto scroll down
    //     chatMessages.scrollTop = chatMessages.scrollHeight;
    // });

    socket.on('addToChat', (data) => {
        appendMessage(data);
    });

    function appendMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.innerText = message;
        chatText.append(messageElement);
        // auto scroll down
        chatText.scrollTop = chatText.scrollHeight;
    }

    // user join message
    // socket.emit('new-user', playerName);

    //Message submit
    chatForm.onsubmit = (e) => {
        e.preventDefault();

        socket.emit('sendMsgToServer', {
            msg: chatInput.value,
            name: playerName
        });

        chatInput.value = '';
    }
    
    ctxx.addEventListener('keydown', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {inputId: 'right', state: true});
        } else if (event.keyCode === 83) { // down
            socket.emit('keyPress', {inputId: 'down', state: true});
        } else if (event.keyCode === 65) { // left
            socket.emit('keyPress', {inputId: 'left', state: true});
        } else if (event.keyCode === 87) { // up
            socket.emit('keyPress', {inputId: 'up', state: true});
        } else {            
        }
    }, false);
    
    ctxx.addEventListener('keyup', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {inputId: 'right', state: false});
        } else if (event.keyCode === 83) { // down
            socket.emit('keyPress', {inputId: 'down', state: false});
        } else if (event.keyCode === 65) { // left
            socket.emit('keyPress', {inputId: 'left', state: false});
        } else if (event.keyCode === 87) { // up
            socket.emit('keyPress', {inputId: 'up', state: false});
        } else {
        }
    }, false);
    
    //img code
    var Img = {};
    Img.player = new Image();
    Img.player.src = '/img/mew.png';
    // Img.map = new Image();
    // Img.map.src = '/img/map.png';
    

    //game
    var Player = function(initPack){
        var self = {};
        self.id = initPack.id;
        self.name = initPack.name;
        self.x = initPack.x;
        self.y = initPack.y;
        self.draw = function(){
            var x = self.x - Player.list[selfId].x + WIDTH/2;
			var y = self.y - Player.list[selfId].y + HEIGHT/2;
			
			var width = Img.player.width/10; //63
            var height = Img.player.height/10; //50
			
			ctx.drawImage(Img.player,
				0,0,Img.player.width,Img.player.height,
				x-width/2,y-height/2,width,height);
            
            ctx.fillText(self.name, x - width/4, y + height *9/10); 
        }
        Player.list[self.id] = self;
        return self;
    }
    Player.list = {};

    var selfId = null;

    //init
    socket.on('init',function(data){
        if(data.selfId) {
            selfId = data.selfId;
        }
		//{ player : [{id:123,name:'Bob',x:0,y:0},{id:1,number:'John',x:0,y:0}], bullet: []}
        for(var i = 0 ; i < data.player.length; i++){ 
            new Player(data.player[i]);            
		}
	});
    //update
    socket.on('update',function(data){
		//{ player : [{id:123,x:0,y:0},{id:1,x:0,y:0}], bullet: []}
		for(var i = 0 ; i < data.player.length; i++){
			var pack = data.player[i];
			var p = Player.list[pack.id];
			if(p){
				if(pack.x !== undefined)
					p.x = pack.x;
				if(pack.y !== undefined)
					p.y = pack.y;
			}
		}
	});

    //remove
    socket.on('remove',function(data){
		//{player:[12323],bullet:[12323,123123]}
		for(var i = 0 ; i < data.player.length; i++){
			delete Player.list[data.player[i]];
		}
    });
    
    setInterval(function(){
        if(!selfId) {
            return;
        }
        ctx.clearRect(0,0,750,500);
        drawMap.draw(); //added .draw()
        for(var i in Player.list)
			Player.list[i].draw();
    },1000/60);
    
    // const drawMap = function() {
    //     var x = WIDTH/2 - Player.list[selfId].x;
    //     var y = HEIGHT/2 - Player.list[selfId].y;
    //     ctx.drawImage(Img.map,x,y);
    // }
    //new code that replaces drawMap function
    Maps = function(id, imgsrc, width, height) {
        var self = {
            id:id,
            image:new Image(),
            width:width,
            height:height,
        }

        self.image.src = imgsrc;

        self.draw = function() {
        var x = WIDTH/2 - Player.list[selfId].x;
        var y = HEIGHT/2 - Player.list[selfId].y;
        ctx.drawImage(self.image,x,y);
        }
        return self;
    }
    drawMap = Maps('field', '/img/map.png', 750,500);
    //new code ends

</script>

