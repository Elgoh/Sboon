<!-- <style>
    .container-1{
        display:flex;
        justify-content: space-around;
    }
</style> -->
<h1 class="text-center mt-4">LIE || DIE</h1>
<p class="lead text-center mb-3">Say hi to your friends <%= user.name %>!</p>
<div class = "container-1">
    <canvas tabindex='1' id="ctx" width="750" height="500" style="border:1px solid #000000; float:left;"></canvas>
    <div id="chatbox" style="float:right; width:30%;">
        <div class="chat-sidebar">
            <h3><i class="fas fa-users"></i> Player's Chat</h3>
        </div>
            <div id = "chat-text" style="float:top; height:200px; overflow-y:auto; overflow-x:auto; "></div>
        <div class="chat-form-container">
        <form id="chat-form">
            <input
            id="chat-input"
            type="text"
            placeholder="Enter Message"
            required
            autocomplete="off"
            />
            <button type="submit" id="chat-form"><i class="fas fa-paper-plane"></i> Send</button>
        </form>
        </div>
        <a href="/dashboard" class="btn btn-secondary" style="margin-top: 10px;">Dashboard</a>
    </div>
</div>
  

 
<script src="/socket.io/socket.io.js"></script>
<script>
    const ctx = document.getElementById("ctx").getContext("2d");
    const ctxx = document.getElementById("ctx");
    ctx.font = '20px lucida';
    const socket = io();
    var WIDTH = 750;
    var HEIGHT = 500;
    //chatbox code
    var chatText = document.getElementById("chat-text");
    var chatForm = document.getElementById("chat-form");
    var chatInput = document.getElementById("chat-input");
    var chatBox = document.getElementById("chatbox");
    // var chatMessages = document.querySelector('.chat-messages');
    var playerName = "<%= user.name %>";

    // socket.on('addToChat', function(data) {
    //     chatText.innerHTML += '<div>' + data + '</div>';
        
    //     // auto scroll down
    //     chatMessages.scrollTop = chatMessages.scrollHeight;
    // });
    
    // let resizeCanvas = function() {
    //     WIDTH = window.innerWidth/2;
    //     HEIGHT = window.innerHeight/1.5;
    //     ctxx.width = WIDTH;
    //     ctxx.height = HEIGHT;
    // }

    // resizeCanvas();

    // window.addEventListener('resize', function () {
    //     resizeCanvas();
    // });

    socket.on('addToChat', (data) => {
        appendMessage(data);
    });

    function appendMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.innerText = message;
        chatText.append(messageElement);
        // auto scroll down
        chatText.scrollTop = chatText.scrollHeight;
    }

    // user join message
    // socket.emit('new-user', playerName);

    //Message submit
    chatForm.onsubmit = (e) => {
        e.preventDefault();

        socket.emit('sendMsgToServer', {
            msg: chatInput.value,
            name: playerName
        });

        chatInput.value = '';
    }
    
    ctxx.addEventListener('keydown', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {inputId: 'right', state: true});
            Player.list[selfId].setDirection('right');
        } else if (event.keyCode === 83) { // down
            socket.emit('keyPress', {inputId: 'down', state: true});
            Player.list[selfId].setDirection('down');
        } else if (event.keyCode === 65) { // left
            socket.emit('keyPress', {inputId: 'left', state: true});
            Player.list[selfId].setDirection('left');
        } else if (event.keyCode === 87) { // up
            socket.emit('keyPress', {inputId: 'up', state: true});
            Player.list[selfId].setDirection('up');
        }  else if (event.keyCode === 32) { // up
            socket.emit('keyPress',{inputId:'attack',state:true});
        } else if (event.keyCode === 16) {
            socket.emit('keyPress',{inputId:'meleeAttack',state:true});
        } else {}
    }, false);
    
    ctxx.addEventListener('keyup', function(event) {
        event.preventDefault();
        if (event.keyCode === 68) { // right
            socket.emit('keyPress', {inputId: 'right', state: false});
        } else if (event.keyCode === 83) { // down
            socket.emit('keyPress', {inputId: 'down', state: false});
        } else if (event.keyCode === 65) { // left
            socket.emit('keyPress', {inputId: 'left', state: false});
        } else if (event.keyCode === 87) { // up
            socket.emit('keyPress', {inputId: 'up', state: false});
        }  else if (event.keyCode === 32) { // up
            socket.emit('keyPress',{inputId:'attack',state:false});
        } else if (event.keyCode === 16) {
            socket.emit('keyPress',{inputId:'meleeAttack',state:false});
        } else {}
    }, false);

    // ctxx.addEventListener('contextmenu', function(event) { // onright click
    //     event.preventDefault();
    //     socket.emit('keyPress',{inputId:'meleeAttack',state:true});
    // }, false);


    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: evt.clientX - rect.left,
          y: evt.clientY - rect.top
        };
      }
    ctxx.addEventListener('mousemove', function(event) {
        event.preventDefault();
        var mousePos = getMousePos(ctxx, event);
        var dx = mousePos.x - WIDTH/2;
        var dy = mousePos.y - HEIGHT/2;
        var angle = Math.atan2(dy,dx) * (180/Math.PI);
        socket.emit('keyPress',{inputId:'mouseAngle',state:angle});
    }, false);

    //img code
    var Img = {};
    Img.player = new Image();
    Img.player.src = '/img/mew.png';
    Img.bullet = new Image();
    Img.bullet.src = '/img/bullet.png';
    Img.slash = new Image();
    Img.slash.src = '/img/slash.png';
    // Img.map = new Image();
    // Img.map.src = '/img/map.png';
 
    //add slash on going now
//add hp 
//add number of kills
    //game
    var Player = function(initPack){
        var self = {};
        self.id = initPack.id;
        self.name = initPack.name;
        self.x = initPack.x;
        self.y = initPack.y;
        self.hp = initPack.hp;
		self.hpMax = initPack.hpMax;
        self.score = initPack.score;
        self.bCount = initPack.bCount;
        self.slashing = initPack.slashing;
        self.slash = initPack.slash;
        self.night = initPack.night;
        //NC -> New Code
        self.pressingRight = false;
        self.pressingLeft = false;
        self.pressingUp = false;
        self.pressingDown = false;
        //NC
		
        self.draw = function(){
            var x = self.x - Player.list[selfId].x + WIDTH/2;
            var y = self.y - Player.list[selfId].y + HEIGHT/2;
            
            var hpWidth = 30 * self.hp / self.hpMax;
			ctx.fillStyle = 'red';
            ctx.fillRect(x - hpWidth/2,y - 40,hpWidth,4)          
			
			var width = Img.player.width/10; //63
            var height = Img.player.height/10; //50

            if(self.slashing) {
                ctx.drawImage(Img.slash,
				0,0,Img.slash.width,Img.slash.height,
                self.slash.x - self.x + WIDTH/2-width/2,self.slash.y - self.y + HEIGHT/2-height/2,
                Img.slash.width/10,Img.slash.height/10);
            }  
			
			ctx.drawImage(Img.player,
				0,0,Img.player.width,Img.player.height,
				x-width/2,y-height/2,width,height);
            ctx.fillStyle = 'black';
            ctx.fillText(self.name, x - width/4, y + height *9/10); 
        }
        //NC
        self.reducedVision = function(opacity) {
            if (self.pressingDown) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
                
            } else if (self.pressingUp) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
                
            } else if (self.pressingRight) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
                
            } else if (self.pressingLeft) {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(350, 250);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
                
            } else {
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(750, 0);
                ctx.lineTo(350, 250);
                ctx.lineTo(750, 500);
                ctx.lineTo(0, 500);
                ctx.lineTo(0, 0);
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 0, 0, ' + opacity + ')';
                ctx.fill();
                
            }
        }
        self.setDirection = function(direction) {
            if (direction === 'right') {
                self.pressingRight = true;
                self.pressingLeft = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'left') {
                self.pressingLeft = true;
                self.pressingRight = false;
                self.pressingDown = false;
                self.pressingUp = false;
            } else if (direction === 'up') {
                self.pressingUp = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingDown = false;
            } else if (direction === 'down') {
                self.pressingDown = true;
                self.pressingRight = false;
                self.pressingLeft = false;
                self.pressingUp = false;
            }
        }
        //NC
        Player.list[self.id] = self;
        return self;
    }
    Player.list = {};

    var Bullet = function(initPack){
		var self = {};
		self.id = initPack.id;
		self.x = initPack.x;
		self.y = initPack.y;
		
		self.draw = function(){
			
			var width = Img.bullet.width/2;
			var height = Img.bullet.height/2;
			
			var x = self.x - Player.list[selfId].x + WIDTH/2;
			var y = self.y - Player.list[selfId].y + HEIGHT/2;
			
			ctx.drawImage(Img.bullet,
				0,0,Img.bullet.width,Img.bullet.height,
				x-width/2,y-height/2,width,height);
		}
		
		Bullet.list[self.id] = self;		
		return self;
	}
	Bullet.list = {};

    var selfId = null;

    //init
    socket.on('init',function(data){
        if(data.selfId) {
            selfId = data.selfId;
        }
		//{ player : [{id:123,name:'Bob',x:0,y:0},{id:1,number:'John',x:0,y:0}], bullet: []}
        for(var i = 0 ; i < data.player.length; i++){ 
            new Player(data.player[i]);            
        }
        for(var i = 0 ; i < data.bullet.length; i++){
			new Bullet(data.bullet[i]);
		}
	});
    //update
    socket.on('update',function(data){
		//{ player : [{id:123,x:0,y:0},{id:1,x:0,y:0}], bullet: []}
		for(var i = 0 ; i < data.player.length; i++){
			var pack = data.player[i];
			var p = Player.list[pack.id];
			if(p){
				if(pack.x !== undefined)
					p.x = pack.x;
				if(pack.y !== undefined)
					p.y = pack.y;
				if(pack.hp !== undefined)
					p.hp = pack.hp;
				if(pack.score !== undefined)
                    p.score = pack.score;
                if(pack.bCount !== undefined)
                    p.bCount = pack.bCount;
                if(pack.slashing !== undefined)
                    p.slashing = pack.slashing;
                if(pack.slash !== undefined)
                    p.slash = pack.slash;
                if(pack.night !== undefined)
                    p.night = pack.night;
			}
		}
        for(var i = 0 ; i < data.bullet.length; i++){
			var pack = data.bullet[i];
			var b = Bullet.list[data.bullet[i].id];
			if(b){
				if(pack.x !== undefined)
					b.x = pack.x;
				if(pack.y !== undefined)
					b.y = pack.y;
			}
		}
	});

    //remove
    socket.on('remove',function(data){
		//{player:[12323],bullet:[12323,123123]}
		for(var i = 0 ; i < data.player.length; i++){
			delete Player.list[data.player[i]];
        }
        for(var i = 0 ; i < data.bullet.length; i++){
			delete Bullet.list[data.bullet[i]];
		}
    });
    
    var opac = 0;
    var nightTime;
    setInterval(function(){
        if(!selfId) {
            return;
        }
        ctx.clearRect(0,0,WIDTH,HEIGHT);
        drawMap.draw(); //added .draw()
        drawScore();
        drawBulletCount();
        for(var i in Player.list)
            Player.list[i].draw();
        for(var i in Bullet.list)
            Bullet.list[i].draw();
        if (Player.list[selfId].night) {
            nightTime = true;
            Player.list[selfId].reducedVision(opac);
            if (opac < 1) {
                opac = opac + 0.004;
            }
        } else if (opac > 0 && !Player.list[selfId].night) {
            nightTime = false;
            Player.list[selfId].reducedVision(opac);
            opac = opac - 0.004;
        }
    },1000/60);
    
    // const drawMap = function() {
    //     var x = WIDTH/2 - Player.list[selfId].x;
    //     var y = HEIGHT/2 - Player.list[selfId].y;
    //     ctx.drawImage(Img.map,x,y);
    // }
    //new code that replaces drawMap function
    var drawScore = function(){
        ctx.fillStyle = 'blue';
        ctx.fillText('Score: ',10, 30); 
		ctx.fillText(Player.list[selfId].score,65,30);
    }
    var drawBulletCount = function(){
        ctx.fillStyle = 'red';
        ctx.fillText('Bullet(s): ',610, 30); 
		ctx.fillText(Player.list[selfId].bCount,700,30);
    }
    
    Maps = function(id, imgsrc, width, height) {
        var self = {
            id:id,
            image:new Image(),
            width:width,
            height:height,
        }

        self.image.src = imgsrc;
        var nightGradient = 1;
        self.draw = function() {
        var x = WIDTH/2 - Player.list[selfId].x;
        var y = HEIGHT/2 - Player.list[selfId].y;
        ctx.drawImage(self.image,x,y);
        if (nightTime) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient < 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient + 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient + 1;
                } else {
                    ctx.fillStyle = "rgba(20, 20, 150, 0.5)"
                }
                ctx.fillRect(0, 0, 750, 500);
            } else if (!nightTime && nightGradient > 1) {
                ctx.globalCompositionOperation = "source-atop";
                if (nightGradient >= 20 && nightGradient <= 150) {
                    ctx.fillStyle = "rgba(20, 20, " + nightGradient + ", 0.5)";  
                    nightGradient = nightGradient - 1;
                } else if (nightGradient < 20) {
                    ctx.fillStyle = "rgba(" + nightGradient + ", " + nightGradient + ", " + nightGradient + ", 0.5)"; 
                    nightGradient = nightGradient - 1;
                } 
                ctx.fillRect(0, 0, 750, 500);
            }
        }
        return self;
    }
    drawMap = Maps('field', '/img/testMap.png', 86,81);
    //new code ends

</script>

